// <auto-generated />
using System;
using LibraryManagement.Win.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LibraryManagement.Win.Migrations
{
    [DbContext(typeof(libraryContext))]
    [Migration("20210824172924_letter")]
    partial class letter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PersonId")
                        .HasColumnName("personId")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("actionEndTime")
                        .HasColumnName("actionEndTime")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("actionFinalTime")
                        .HasColumnName("actionFinalTime")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("actionTime")
                        .HasColumnName("actionTime")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublicationId");

                    b.ToTable("tbaction");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CoverText")
                        .IsRequired()
                        .HasColumnName("coverText")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("tbbook");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbbookwriter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BookId")
                        .HasColumnName("bookId")
                        .HasColumnType("integer");

                    b.Property<int>("WriterId")
                        .HasColumnName("writerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("WriterId");

                    b.ToTable("tbbookwriter");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbencyclopedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("tbencyclopedia");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbmagazine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnName("period")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publishDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("tbmagazine");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbmanager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnName("pass")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("PersonId")
                        .HasColumnName("personId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnName("roleId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("userName")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbmanager");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbmember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PersonId")
                        .HasColumnName("personId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnName("registerDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("tbmember");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbpenalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActionId")
                        .HasColumnName("actionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PenaltyEndTime")
                        .HasColumnName("penaltyEndTime")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("PenaltyTime")
                        .HasColumnName("penaltyTime")
                        .HasColumnType("timestamp");

                    b.Property<int>("PersonId")
                        .HasColumnName("personId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("PersonId");

                    b.ToTable("tbpenalty");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbperson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbperson");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbpublication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClassifcationNumber")
                        .IsRequired()
                        .HasColumnName("classifcationNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Isbn")
                        .HasColumnName("ISBN")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PageCount")
                        .HasColumnName("pageCount")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationTypeId")
                        .HasColumnName("publicationTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PublishHomeId")
                        .HasColumnName("publishHomeId")
                        .HasColumnType("integer");

                    b.Property<string>("RegisterNumber")
                        .IsRequired()
                        .HasColumnName("registerNumber")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PublicationTypeId");

                    b.HasIndex("PublishHomeId");

                    b.ToTable("tbpublication");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbpublicationtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbpublicationtype");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbpublishhome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbpublishhome");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbrole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Add")
                        .HasColumnName("add")
                        .HasColumnType("boolean");

                    b.Property<bool>("BookGive")
                        .HasColumnName("bookGive")
                        .HasColumnType("boolean");

                    b.Property<bool>("BookReturn")
                        .HasColumnName("bookReturn")
                        .HasColumnType("boolean");

                    b.Property<bool>("Delete")
                        .HasColumnName("delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnName("edit")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbrole");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbsettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnName("libraryName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("PublicationCount")
                        .HasColumnName("publicationcount")
                        .HasColumnType("integer");

                    b.Property<int>("ReadDayLimit")
                        .HasColumnName("readDayLimit")
                        .HasColumnType("integer");

                    b.Property<int>("WriterCount")
                        .HasColumnName("writercount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("tbsettings");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbwriter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Biography")
                        .HasColumnName("biography")
                        .HasColumnType("character(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int>("PersonId")
                        .HasColumnName("personId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("tbwriter");
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbaction", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbperson", "Person")
                        .WithMany("Tbaction")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_tbaction_tbperson")
                        .IsRequired();

                    b.HasOne("LibraryManagement.Win.Models.Tbpublication", "Publication")
                        .WithMany("Tbaction")
                        .HasForeignKey("PublicationId")
                        .HasConstraintName("FK_tbaction_tbpublication")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbbook", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbpublication", "Publication")
                        .WithMany("Tbbook")
                        .HasForeignKey("PublicationId")
                        .HasConstraintName("FK_tbbook_tbpublication")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbbookwriter", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbbook", "Book")
                        .WithMany("Tbbookwriter")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_tbbookwriter_tbbook")
                        .IsRequired();

                    b.HasOne("LibraryManagement.Win.Models.Tbwriter", "Writer")
                        .WithMany("Tbbookwriter")
                        .HasForeignKey("WriterId")
                        .HasConstraintName("FK_tbbookwriter_tbwriter")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbencyclopedia", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbpublication", "Publication")
                        .WithMany("Tbencyclopedia")
                        .HasForeignKey("PublicationId")
                        .HasConstraintName("FK_tbencyclopedia_tbpublication")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbmagazine", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbpublication", "Publication")
                        .WithMany("Tbmagazine")
                        .HasForeignKey("PublicationId")
                        .HasConstraintName("FK_tbmagazine_tbpublication")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbmanager", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbperson", "Person")
                        .WithMany("Tbmanager")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_tbmanager_tbperson")
                        .IsRequired();

                    b.HasOne("LibraryManagement.Win.Models.Tbrole", "Role")
                        .WithMany("Tbmanager")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_tbmanager_tbrole")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbmember", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbperson", "Person")
                        .WithMany("Tbmember")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_tbmember_tbperson")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbpenalty", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbaction", "Action")
                        .WithMany("Tbpenalty")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_tbpenalty_tbaction")
                        .IsRequired();

                    b.HasOne("LibraryManagement.Win.Models.Tbperson", "Person")
                        .WithMany("Tbpenalty")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_tbpenalty_tbperson")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbpublication", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbpublication", "PublicationType")
                        .WithMany("InversePublicationType")
                        .HasForeignKey("PublicationTypeId")
                        .HasConstraintName("FK_tbpublication_tbpublication")
                        .IsRequired();

                    b.HasOne("LibraryManagement.Win.Models.Tbpublishhome", "PublishHome")
                        .WithMany("Tbpublication")
                        .HasForeignKey("PublishHomeId")
                        .HasConstraintName("FK_tbpublication_tbpublishhome")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Win.Models.Tbwriter", b =>
                {
                    b.HasOne("LibraryManagement.Win.Models.Tbperson", "Person")
                        .WithMany("Tbwriter")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_tbwriter_tbperson")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
